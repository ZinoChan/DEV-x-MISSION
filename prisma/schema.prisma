// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  about         String?        @db.Text
  location      String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  missions      Mission[]
  likes         Like[]
  votes         Vote[]
  savedMissions SavedMission[]
  Comment       Comment[]
  followers     Follows[]      @relation("following")
  following     Follows[]      @relation("follower")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CommunityLink {
  id        String  @id @default(cuid())
  linkName  String
  linkUrl   String
  mission   Mission @relation(fields: [missionId], references: [id])
  missionId String
}

model SkillRequired {
  id        String  @id @default(cuid())
  name      String
  mission   Mission @relation(fields: [missionId], references: [id])
  missionId String
}

model Mission {
  id               String          @id @default(cuid())
  missionName      String
  missionStatus    String
  missionType      String
  published        Boolean         @default(false)
  skillLevel       String
  missionObjective String          @db.Text
  communityLinks   CommunityLink[]
  skillsRequired   SkillRequired[]
  missionDetails   String?         @db.Text
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  likes            Like[]
  votes            Vote[]
  SavedMission     SavedMission[]
  comments         Comment[]
  createAt         DateTime        @default(now())
  updateAt         DateTime        @updatedAt
  missionOrder     Int             @default(autoincrement())
}

model Like {
  id        String  @id @default(cuid())
  userId    String
  missionId String
  user      User    @relation(fields: [userId], references: [id])
  mission   Mission @relation(fields: [missionId], references: [id])
}

model Vote {
  id        String  @id @default(cuid())
  userId    String
  missionId String
  user      User    @relation(fields: [userId], references: [id])
  mission   Mission @relation(fields: [missionId], references: [id])
}

model SavedMission {
  id        String  @id @default(cuid())
  userId    String
  missionId String
  user      User    @relation(fields: [userId], references: [id])
  mission   Mission @relation(fields: [missionId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  missionId String
  user      User     @relation(fields: [userId], references: [id])
  mission   Mission  @relation(fields: [missionId], references: [id])
  content   String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}
